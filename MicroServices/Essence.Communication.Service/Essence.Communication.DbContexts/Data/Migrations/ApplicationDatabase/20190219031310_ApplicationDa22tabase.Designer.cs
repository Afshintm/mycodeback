// <auto-generated />
using System;
using Essence.Communication.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Essence.Communication.DbContexts.Data.Migrations.ApplicationDatabase
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190219031310_ApplicationDa22tabase")]
    partial class ApplicationDa22tabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Application")
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Essence.Communication.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNo");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("GroupId");

                    b.Property<string>("VendorAccountNo");

                    b.Property<string>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("VendorId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Essence.Communication.Models.AccountGroup", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AccountGroup");

                    b.HasData(
                        new
                        {
                            Id = "6d1b3ab8-183f-453a-8e2e-e6b200006138",
                            CreatedDate = new DateTime(2019, 2, 19, 3, 13, 9, 780, DateTimeKind.Utc).AddTicks(1878),
                            Name = "TestGroup"
                        });
                });

            modelBuilder.Entity("Essence.Communication.Models.AccountUser", b =>
                {
                    b.Property<string>("AccountId");

                    b.Property<string>("UserId");

                    b.Property<DateTime>("CreatedDate");

                    b.HasKey("AccountId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AccountUser");
                });

            modelBuilder.Entity("Essence.Communication.Models.Dtos.EssenceEventObjectStructure", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Account");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2019, 2, 19, 3, 13, 9, 737, DateTimeKind.Utc).AddTicks(6603));

                    b.Property<string>("Ids");

                    b.Property<string>("PanelTime");

                    b.Property<string>("ServerTime");

                    b.Property<int?>("ServiceProvider");

                    b.Property<int?>("ServiceType");

                    b.Property<string>("VendorId");

                    b.HasKey("Id")
                        .HasName("PK_EssenceEvent_Id");

                    b.HasIndex("VendorId");

                    b.ToTable("EssenceEvent");
                });

            modelBuilder.Entity("Essence.Communication.Models.EventBase", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountId");

                    b.Property<string>("AlertType")
                        .IsRequired();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("HSCCode");

                    b.Property<bool?>("IsMobile");

                    b.Property<string>("PanelTime");

                    b.Property<string>("ServerTime");

                    b.Property<int?>("ServiceProvider");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("VendorEventId");

                    b.HasKey("Id")
                        .HasName("PK_HCSEvent_Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Event");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EventBase");
                });

            modelBuilder.Entity("Essence.Communication.Models.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .HasColumnName("Address");

                    b.Property<string>("CellPhoneNumber")
                        .HasColumnName("CellPhoneNumber");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasColumnName("FirstName");

                    b.Property<string>("Gender")
                        .HasColumnName("Gender");

                    b.Property<string>("LastName")
                        .HasColumnName("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasColumnName("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("UserType")
                        .HasColumnName("UserType");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User","Identity");
                });

            modelBuilder.Entity("Essence.Communication.Models.UserReference", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasColumnName("Address");

                    b.Property<string>("CellPhoneNumber")
                        .HasColumnName("CellPhoneNumber");

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .HasColumnName("FirstName");

                    b.Property<string>("Gender")
                        .HasColumnName("Gender");

                    b.Property<string>("LastName")
                        .HasColumnName("LastName");

                    b.Property<string>("UserName")
                        .HasColumnName("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("UserType")
                        .HasColumnName("UserType");

                    b.Property<string>("VendorId");

                    b.Property<string>("VendorUserId");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("User","Identity");
                });

            modelBuilder.Entity("Essence.Communication.Models.Vendor", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Vendor");

                    b.HasData(
                        new
                        {
                            Id = "6dcbe9e4-c0a1-4658-ba38-85f78615985f",
                            CreatedDate = new DateTime(2019, 2, 19, 3, 13, 9, 778, DateTimeKind.Utc).AddTicks(5098),
                            Name = "Essence"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role","Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim","Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim","Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin","Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole","Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken","Identity");
                });

            modelBuilder.Entity("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.BatteryDetails>", b =>
                {
                    b.HasBaseType("Essence.Communication.Models.EventBase");

                    b.HasDiscriminator().HasValue("Event<BatteryDetails>");
                });

            modelBuilder.Entity("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.EmergencyPanicDetails>", b =>
                {
                    b.HasBaseType("Essence.Communication.Models.EventBase");

                    b.HasDiscriminator().HasValue("Event<EmergencyPanicDetails>");
                });

            modelBuilder.Entity("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.FallAlertDetails>", b =>
                {
                    b.HasBaseType("Essence.Communication.Models.EventBase");

                    b.HasDiscriminator().HasValue("Event<FallAlertDetails>");
                });

            modelBuilder.Entity("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.PanelStatusDetails>", b =>
                {
                    b.HasBaseType("Essence.Communication.Models.EventBase");

                    b.HasDiscriminator().HasValue("Event<PanelStatusDetails>");
                });

            modelBuilder.Entity("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.PowerDetails>", b =>
                {
                    b.HasBaseType("Essence.Communication.Models.EventBase");

                    b.HasDiscriminator().HasValue("Event<PowerDetails>");
                });

            modelBuilder.Entity("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.StayHomeDetails>", b =>
                {
                    b.HasBaseType("Essence.Communication.Models.EventBase");

                    b.HasDiscriminator().HasValue("Event<StayHomeDetails>");
                });

            modelBuilder.Entity("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.UnexpectedActivityDetails>", b =>
                {
                    b.HasBaseType("Essence.Communication.Models.EventBase");

                    b.HasDiscriminator().HasValue("Event<UnexpectedActivityDetails>");
                });

            modelBuilder.Entity("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.UnexpectedEntryExitDetails>", b =>
                {
                    b.HasBaseType("Essence.Communication.Models.EventBase");

                    b.HasDiscriminator().HasValue("Event<UnexpectedEntryExitDetails>");
                });

            modelBuilder.Entity("Essence.Communication.Models.Account", b =>
                {
                    b.HasOne("Essence.Communication.Models.AccountGroup", "Group")
                        .WithMany("Accounts")
                        .HasForeignKey("GroupId");

                    b.HasOne("Essence.Communication.Models.Vendor", "Vendor")
                        .WithMany("Accounts")
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("Essence.Communication.Models.AccountUser", b =>
                {
                    b.HasOne("Essence.Communication.Models.Account", "Account")
                        .WithMany("AccountUsers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Essence.Communication.Models.UserReference", "User")
                        .WithMany("AccountUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Essence.Communication.Models.Dtos.EssenceEventObjectStructure", b =>
                {
                    b.HasOne("Essence.Communication.Models.Vendor", "Vendor")
                        .WithMany("VendorEvents")
                        .HasForeignKey("VendorId");

                    b.OwnsOne("Essence.Communication.Models.Dtos.EssenceEventObject", "Event", b1 =>
                        {
                            b1.Property<string>("EssenceEventObjectStructureId");

                            b1.Property<int>("Code");

                            b1.Property<string>("Details");

                            b1.Property<bool?>("IsMobile");

                            b1.Property<int>("Severity");

                            b1.HasKey("EssenceEventObjectStructureId");

                            b1.ToTable("EssenceEvent","Application");

                            b1.HasOne("Essence.Communication.Models.Dtos.EssenceEventObjectStructure")
                                .WithOne("Event")
                                .HasForeignKey("Essence.Communication.Models.Dtos.EssenceEventObject", "EssenceEventObjectStructureId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("Essence.Communication.Models.ValueObjects.Location", "Location", b2 =>
                                {
                                    b2.Property<string>("EssenceEventObjectStructureId");

                                    b2.Property<int?>("HorizontalAccuracy");

                                    b2.Property<string>("Latitude");

                                    b2.Property<string>("Longitude");

                                    b2.HasKey("EssenceEventObjectStructureId");

                                    b2.ToTable("EssenceEvent","Application");

                                    b2.HasOne("Essence.Communication.Models.Dtos.EssenceEventObject")
                                        .WithOne("Location")
                                        .HasForeignKey("Essence.Communication.Models.ValueObjects.Location", "EssenceEventObjectStructureId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });

            modelBuilder.Entity("Essence.Communication.Models.EventBase", b =>
                {
                    b.HasOne("Essence.Communication.Models.Account", "Account")
                        .WithMany("HSCEvents")
                        .HasForeignKey("AccountId");

                    b.OwnsOne("Essence.Communication.Models.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<string>("EventBaseId");

                            b1.Property<int?>("HorizontalAccuracy")
                                .HasColumnName("HorizontalAccuracy");

                            b1.Property<string>("Latitude")
                                .HasColumnName("Latitude");

                            b1.Property<string>("Longitude")
                                .HasColumnName("Longitude");

                            b1.HasKey("EventBaseId");

                            b1.ToTable("Event","Application");

                            b1.HasOne("Essence.Communication.Models.EventBase")
                                .WithOne("Location")
                                .HasForeignKey("Essence.Communication.Models.ValueObjects.Location", "EventBaseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Essence.Communication.Models.IdentityModels.ApplicationUser", b =>
                {
                    b.HasOne("Essence.Communication.Models.UserReference", "UserRef")
                        .WithOne("User")
                        .HasForeignKey("Essence.Communication.Models.IdentityModels.ApplicationUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Essence.Communication.Models.UserReference", b =>
                {
                    b.HasOne("Essence.Communication.Models.Vendor", "Vendor")
                        .WithMany("Users")
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Essence.Communication.Models.IdentityModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Essence.Communication.Models.IdentityModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Essence.Communication.Models.IdentityModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Essence.Communication.Models.IdentityModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.BatteryDetails>", b =>
                {
                    b.OwnsOne("Essence.Communication.Models.ValueObjects.BatteryDetails", "Details", b1 =>
                        {
                            b1.Property<string>("Event<BatteryDetails>Id");

                            b1.Property<int>("BatteryLevel");

                            b1.Property<string>("DeviceDescription");

                            b1.Property<int>("DeviceId");

                            b1.Property<int>("DeviceType");

                            b1.HasKey("Event<BatteryDetails>Id");

                            b1.ToTable("Event","Application");

                            b1.HasOne("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.BatteryDetails>")
                                .WithOne("Details")
                                .HasForeignKey("Essence.Communication.Models.ValueObjects.BatteryDetails", "Event<BatteryDetails>Id")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.EmergencyPanicDetails>", b =>
                {
                    b.OwnsOne("Essence.Communication.Models.ValueObjects.EmergencyPanicDetails", "Details", b1 =>
                        {
                            b1.Property<string>("Event<EmergencyPanicDetails>Id");

                            b1.Property<string>("DeviceDescription")
                                .HasColumnName("EmergencyPanicDetails_Details_DeviceDescription");

                            b1.Property<int>("DeviceId")
                                .HasColumnName("EmergencyPanicDetails_Details_DeviceId");

                            b1.Property<int>("DeviceType")
                                .HasColumnName("EmergencyPanicDetails_Details_DeviceType");

                            b1.HasKey("Event<EmergencyPanicDetails>Id");

                            b1.ToTable("Event","Application");

                            b1.HasOne("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.EmergencyPanicDetails>")
                                .WithOne("Details")
                                .HasForeignKey("Essence.Communication.Models.ValueObjects.EmergencyPanicDetails", "Event<EmergencyPanicDetails>Id")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.FallAlertDetails>", b =>
                {
                    b.OwnsOne("Essence.Communication.Models.ValueObjects.FallAlertDetails", "Details", b1 =>
                        {
                            b1.Property<string>("Event<FallAlertDetails>Id");

                            b1.Property<int>("Activitytype");

                            b1.Property<string>("DeviceDescription")
                                .HasColumnName("FallAlertDetails_Details_DeviceDescription");

                            b1.Property<int>("DeviceId")
                                .HasColumnName("FallAlertDetails_Details_DeviceId");

                            b1.Property<int>("DeviceType")
                                .HasColumnName("FallAlertDetails_Details_DeviceType");

                            b1.Property<string>("DurationInRoom");

                            b1.HasKey("Event<FallAlertDetails>Id");

                            b1.ToTable("Event","Application");

                            b1.HasOne("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.FallAlertDetails>")
                                .WithOne("Details")
                                .HasForeignKey("Essence.Communication.Models.ValueObjects.FallAlertDetails", "Event<FallAlertDetails>Id")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.PanelStatusDetails>", b =>
                {
                    b.OwnsOne("Essence.Communication.Models.ValueObjects.PanelStatusDetails", "Details", b1 =>
                        {
                            b1.Property<string>("Event<PanelStatusDetails>Id");

                            b1.Property<string>("LastContactTime");

                            b1.HasKey("Event<PanelStatusDetails>Id");

                            b1.ToTable("Event","Application");

                            b1.HasOne("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.PanelStatusDetails>")
                                .WithOne("Details")
                                .HasForeignKey("Essence.Communication.Models.ValueObjects.PanelStatusDetails", "Event<PanelStatusDetails>Id")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.PowerDetails>", b =>
                {
                    b.OwnsOne("Essence.Communication.Models.ValueObjects.PowerDetails", "Details", b1 =>
                        {
                            b1.Property<string>("Event<PowerDetails>Id");

                            b1.Property<string>("DeviceDescription")
                                .HasColumnName("PowerDetails_Details_DeviceDescription");

                            b1.Property<int>("DeviceId")
                                .HasColumnName("PowerDetails_Details_DeviceId");

                            b1.Property<int>("DeviceType")
                                .HasColumnName("PowerDetails_Details_DeviceType");

                            b1.Property<string>("PowerFailureDuration");

                            b1.Property<string>("PowerRestoredDuration");

                            b1.HasKey("Event<PowerDetails>Id");

                            b1.ToTable("Event","Application");

                            b1.HasOne("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.PowerDetails>")
                                .WithOne("Details")
                                .HasForeignKey("Essence.Communication.Models.ValueObjects.PowerDetails", "Event<PowerDetails>Id")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.StayHomeDetails>", b =>
                {
                    b.OwnsOne("Essence.Communication.Models.ValueObjects.StayHomeDetails", "Details", b1 =>
                        {
                            b1.Property<string>("Event<StayHomeDetails>Id");

                            b1.Property<string>("EntryTime");

                            b1.Property<string>("ExitTime");

                            b1.Property<string>("MaximumOutOfHomeDuration");

                            b1.Property<string>("PeriodEndTime");

                            b1.Property<string>("PeriodStartTime");

                            b1.HasKey("Event<StayHomeDetails>Id");

                            b1.ToTable("Event","Application");

                            b1.HasOne("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.StayHomeDetails>")
                                .WithOne("Details")
                                .HasForeignKey("Essence.Communication.Models.ValueObjects.StayHomeDetails", "Event<StayHomeDetails>Id")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.UnexpectedActivityDetails>", b =>
                {
                    b.OwnsOne("Essence.Communication.Models.ValueObjects.UnexpectedActivityDetails", "Details", b1 =>
                        {
                            b1.Property<string>("Event<UnexpectedActivityDetails>Id");

                            b1.Property<string>("DeviceDescription")
                                .HasColumnName("UnexpectedActivityDetails_Details_DeviceDescription");

                            b1.Property<int>("DeviceId")
                                .HasColumnName("UnexpectedActivityDetails_Details_DeviceId");

                            b1.Property<int>("DeviceType")
                                .HasColumnName("UnexpectedActivityDetails_Details_DeviceType");

                            b1.Property<float>("Grade");

                            b1.HasKey("Event<UnexpectedActivityDetails>Id");

                            b1.ToTable("Event","Application");

                            b1.HasOne("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.UnexpectedActivityDetails>")
                                .WithOne("Details")
                                .HasForeignKey("Essence.Communication.Models.ValueObjects.UnexpectedActivityDetails", "Event<UnexpectedActivityDetails>Id")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.UnexpectedEntryExitDetails>", b =>
                {
                    b.OwnsOne("Essence.Communication.Models.ValueObjects.UnexpectedEntryExitDetails", "Details", b1 =>
                        {
                            b1.Property<string>("Event<UnexpectedEntryExitDetails>Id");

                            b1.Property<string>("DeviceDescription")
                                .HasColumnName("UnexpectedEntryExitDetails_Details_DeviceDescription");

                            b1.Property<int>("DeviceId")
                                .HasColumnName("UnexpectedEntryExitDetails_Details_DeviceId");

                            b1.Property<int>("DeviceType")
                                .HasColumnName("UnexpectedEntryExitDetails_Details_DeviceType");

                            b1.HasKey("Event<UnexpectedEntryExitDetails>Id");

                            b1.ToTable("Event","Application");

                            b1.HasOne("Essence.Communication.Models.Event<Essence.Communication.Models.ValueObjects.UnexpectedEntryExitDetails>")
                                .WithOne("Details")
                                .HasForeignKey("Essence.Communication.Models.ValueObjects.UnexpectedEntryExitDetails", "Event<UnexpectedEntryExitDetails>Id")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("Essence.Communication.Models.ValueObjects.Period", "Period", b2 =>
                                {
                                    b2.Property<string>("UnexpectedEntryExitDetailsEvent<UnexpectedEntryExitDetails>Id");

                                    b2.Property<bool>("Is24Hours");

                                    b2.Property<string>("PeriodEndTime");

                                    b2.Property<string>("PeriodStartTime");

                                    b2.HasKey("UnexpectedEntryExitDetailsEvent<UnexpectedEntryExitDetails>Id");

                                    b2.ToTable("Event","Application");

                                    b2.HasOne("Essence.Communication.Models.ValueObjects.UnexpectedEntryExitDetails")
                                        .WithOne("Period")
                                        .HasForeignKey("Essence.Communication.Models.ValueObjects.Period", "UnexpectedEntryExitDetailsEvent<UnexpectedEntryExitDetails>Id")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
