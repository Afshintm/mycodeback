using System;
using System.Collections.Generic;
using System.Text;

namespace Essence.Communication.Models.Dtos
{
    public class ActivityResult
    {
        public bool Value { get; set; }
        public int Response { get; set; }
        public string ResponseDescription { get; set; }
        public Activitytype[] ActivityTypes { get; set; }
        public Missinginformation[] MissingInformation { get; set; }
    }

    public class Activitytype
    {
        public string ActivityType { get; set; }
        public Activity[] Activities { get; set; }
    }

    public class Activity
    {
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public bool PassThreshold { get; set; }
    }

    public class Missinginformation
    {
        public string Reason { get; set; }
        public Interval[] Intervals { get; set; }
    }

    public class Interval
    {
        public DateTime StartTime { get; set; }
        public DateTime? EndTime { get; set; }
        public string PreviousActivity { get; set; }
    }
}

/*
// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var activityResult = ActivityResult.FromJson(jsonString);

namespace Essence.Communication.Models.Dtos
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ActivityResult
    {
        [JsonProperty("Value")]
        public bool Value { get; set; }

        [JsonProperty("Response")]
        public long Response { get; set; }

        [JsonProperty("ResponseDescription")]
        public string ResponseDescription { get; set; }

        [JsonProperty("activityTypes")]
        public ActivityType[] ActivityTypes { get; set; }

        [JsonProperty("missingInformation")]
        public MissingInformation[] MissingInformation { get; set; }
    }

    public partial class ActivityType
    {
        [JsonProperty("activityType")]
        public string ActivityTypeActivityType { get; set; }

        [JsonProperty("activities")]
        public Activity[] Activities { get; set; }
    }

    public partial class Activity
    {
        [JsonProperty("startTime")]
        public string StartTime { get; set; }

        [JsonProperty("endTime")]
        public string EndTime { get; set; }

        [JsonProperty("passThreshold")]
        public bool PassThreshold { get; set; }
    }

    public partial class MissingInformation
    {
        [JsonProperty("reason")]
        public string Reason { get; set; }

        [JsonProperty("intervals")]
        public Interval[] Intervals { get; set; }
    }

    public partial class Interval
    {
        [JsonProperty("startTime")]
        public DateTimeOffset StartTime { get; set; }

        [JsonProperty("endTime")]
        public DateTimeOffset? EndTime { get; set; }

        [JsonProperty("previousActivity")]
        public string PreviousActivity { get; set; }
    }

    public partial class ActivityResult
    {
        public static ActivityResult FromJson(string json) => JsonConvert.DeserializeObject<ActivityResult>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ActivityResult self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}

    */
